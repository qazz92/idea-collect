"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-01-01 13:00:00`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

###
# 대략 이런식으로 쿼리를 날리면 된다.
#{
#    eduCampListByEduMentorNo(
#        orderBy: { field: "created_at", order: DESC }
#        mentor_no: 5
#        first: 10
#        page : 1
#    ) {
#        data {
#            no
#            title
#        }
#        paginatorInfo {
#            count
#            firstItem
#            hasMorePages
#            lastItem
#            total
#            perPage
#            currentPage
#            lastPage
#        }
#    }
#}
###

## select 친구들
type Query {
    # user list 가져오기
    users(orderBy: [OrderByClause!] @orderBy): [User!]! @paginate @middleware(checks: ["auth:api"])
    # user 정보 가져오기
    user(id: ID! @eq): User @find
    # memo
    memo(id: ID! @eq): Memo @find @middleware(checks: ["auth:api"])
    # memo list
    memos(id: ID! @eq): [Memo!]! @paginate @middleware(checks: ["auth:api"])
}

## 나머지 친구들

###
type Mutation {
    createUser(
        nickname: String @rules(apply: ["required", "unique:users"])
        email: String @rules(apply: ["required", "unique:users", "email"])
        pw : String @hash @rules(apply: ["required", "min:8"])
    ) : User! @create

    createMemo(
        contents: String!
        user_id: Int!
        like_count: Int!
    ) : Memo! @create @middleware(checks: ["auth:api"])
}
###

###
#mutation {
#    updateEduMentor(
#        no: 284
#        user_no: 46018
#        real_name: "test2"
#        nickname: "test_nick2"
#        display_name: "test_dis2"
#        company: "test_com2"
#        brief_history: "test_brief2"
#        introduce: "test_intro2"){
#        no
#        real_name
#        created_at
#    }
#}
###

###
#mutation {
#    deleteUser(
#        no: 284){
#        no
#        real_name
#        created_at
#    }
#}
###


input OrderByClause{
    field: String!
    order: SortOrder!
}

enum SortOrder {
    ASC
    DESC
}

type User {
    id: ID!
    nickname: String!
    email: String!
    pw: String!
    remember_token: String
    created_at: DateTime!
    updated_at: DateTime!
}

type Memo {
    id: ID!
    contents: String!
    user_id : Int!
    like_count : Int!
    deleted_at: DateTime!
    created_at: DateTime!
    updated_at: DateTime!
    user: User!
}

type MemoFeedback {
    id: ID!
    contents: String!
    memo_id: Int!
    user_id : Int!
    like_count : Int!
    deleted_at: DateTime!
    created_at: DateTime!
    updated_at: DateTime!
}

type MemoLike {
    id: ID!
    memo_id: Int!
    user_id : Int!
    type : Int!
    created_at: DateTime!
    updated_at: DateTime!
}

type MemoFeedbackLike {
    id: ID!
    memo_id: Int!
    user_id : Int!
    type : Int!
    created_at: DateTime!
    updated_at: DateTime!
}
